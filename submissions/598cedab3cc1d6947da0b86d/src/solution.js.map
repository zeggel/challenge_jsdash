{"version":3,"sources":["define.js","solution/common.ts","solution/path.ts","solution/graph.ts","solution/changeset.ts","solution/search.ts","solution/ai.ts","solution/world.ts","solution/bot.ts","solution/solution.ts"],"names":[],"mappings":"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","file":"solution.js","sourcesContent":["const __exports = {};\r\n\r\nconst define = function (moduleName, dependencies, callback) {\r\n    const moduleExports = __exports[moduleName] = {};\r\n    const args = [null, moduleExports];\r\n    for (let i = 2; i < dependencies.length; i++) {\r\n        args.push(__exports[dependencies[i]]);\r\n    }\r\n    callback.apply(null, args)\r\n}","export const debug: boolean = false;\r\n\r\nexport type Point = number;\r\nexport type Cell = number;\r\n\r\nexport const enum Settings {\r\n  frames = 1200,\r\n  height = 22,\r\n  width = 40,\r\n  size = width * height,\r\n  start = width + 1,\r\n  end = size - width - 1,\r\n}\r\n\r\nexport const enum Direction {\r\n  Up = 0,\r\n  Right = 1,\r\n  Down = 2,\r\n  Left = 3,\r\n  Stay = 4\r\n}\r\n\r\nexport const enum Delta {\r\n  up = -Settings.width,\r\n  right = 1,\r\n  down = Settings.width,\r\n  left = -1\r\n}\r\n\r\nexport const delta: Point[] = [Delta.up, Delta.right, Delta.down, Delta.left];\r\n\r\nexport const enum CellType {\r\n  Nothing = 0,\r\n  Steel = 1,\r\n  Brick = 2,\r\n  Dirt = 3,\r\n  Boulder = 4,\r\n  Diamond = 5,\r\n  Butterfly = 6,\r\n  Explosion = 7,\r\n  Player = 8,\r\n  ButterflyKilled = 9\r\n}\r\n\r\nexport const enum Mask {\r\n  type = 0b00001111,\r\n  falling = 0b00010000,\r\n  direction = 0b01100000,\r\n  stage = 0b01100000,\r\n  mark = 0b10000000,\r\n  bad = 0b100000000\r\n}\r\n\r\nexport const enum Offset {\r\n  stage = 5,\r\n  direction = 5\r\n}\r\n\r\nexport const enum Score {\r\n  dead = -100,\r\n  locked = -10\r\n}\r\n\r\nexport const cw = (direction: Direction): Direction => {\r\n  direction++;\r\n  if (direction >= 4) {\r\n    direction -= 4;\r\n  }\r\n  return direction;\r\n}\r\n\r\nexport const ccw = (direction: Direction): Direction => {\r\n  direction--;\r\n  if (direction < 0) {\r\n    direction += 4;\r\n  }\r\n  return direction;\r\n}\r\n\r\nexport const enum StepAvailability {\r\n  Available = 1,\r\n  Unavailable = 2,\r\n  Death = 3\r\n}\r\n\r\nexport interface ICellDif {\r\n  point: Point;\r\n  old: Cell;\r\n}\r\n\r\nexport interface IChangeSet {\r\n  init(): void;\r\n  revert(): void;\r\n  add(dif: ICellDif): void;\r\n}\r\n\r\nexport interface IWorld {\r\n  cells: Cell[];\r\n  frame: number;\r\n  score: number;\r\n  scoredExpiry: number;\r\n  streak: number;\r\n  streakExpiry: number;\r\n  streaks: number;\r\n  longestStreak: number;\r\n  diamonds: number;\r\n  diamondsCollected: number;\r\n  butterflies: number;\r\n  butterfliesKilled: number;\r\n  playerPoint: Point;\r\n  playerAlive: boolean;\r\n  isSettled: boolean;\r\n  changeSet: IChangeSet;\r\n\r\n  update(): void;\r\n  markCell(cell: Cell): Cell;\r\n  control(direction: Direction): void;\r\n  isFinal(): boolean;\r\n  isDead(): boolean;\r\n  isPlayerClosed(): boolean;\r\n  isLocked(): boolean;\r\n  possibleStep(direction: Direction): StepAvailability;\r\n  renderScreen(): string[];\r\n  compare(): void;\r\n  warmUp(): void; //magic!!!\r\n}\r\n\r\nexport class FastStack<T> {\r\n  items: T[];\r\n  length: number = 0;\r\n\r\n  constructor(size: number) {\r\n    this.items = new Array<T>(size);\r\n  }\r\n\r\n  push(item: T): void {\r\n    this.items[this.length++] = item;\r\n  }\r\n\r\n  pop(): T {\r\n    return this.items[--this.length];\r\n  }\r\n\r\n  popSafe(): T {\r\n    if (this.length <= 0) {\r\n      return undefined;\r\n    } else {\r\n      return this.pop();\r\n    }\r\n  }\r\n\r\n  pushEmpty(): T {\r\n    let item = this.items[this.length];\r\n    if (!item) {\r\n      item = <T>{};\r\n      this.items[this.length] = item;\r\n    }\r\n    this.length++;\r\n    return item;\r\n  }\r\n\r\n  clear(): void {\r\n    this.length = 0;\r\n  }\r\n}\r\n\r\nexport class Pool<T> {\r\n  private instances: FastStack<T>;\r\n  size: number;\r\n\r\n  constructor(private create: () => T, size: number) {\r\n    this.instances = new FastStack<T>(size);\r\n    for (let i = 0; i < size; i++) {\r\n      this.instances.push(this.create());\r\n    }\r\n  }\r\n\r\n  getObject(): T {\r\n    let instance = this.instances.popSafe();\r\n    if (!instance) {\r\n      instance = this.create();\r\n      this.instances.push(instance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  release(obj: T): void {\r\n    this.instances.push(obj);\r\n  }\r\n}\r\n\r\nexport class Dictionary<TValue> {\r\n  length: number = 0;\r\n  private readonly hash: { [key: number]: TValue } = {};\r\n\r\n  get(key: number): TValue {\r\n    return this.hash[key];\r\n  }\r\n  set(key: number, value: TValue): void {\r\n    const old = this.hash[key];\r\n    if (old === value) {\r\n      return;\r\n    }\r\n    if (!old) {\r\n      this.length++;\r\n    }\r\n    this.hash[key] = value;\r\n  }\r\n  remove(key: number): void {\r\n    const old = this.hash[key];\r\n    if (old) {\r\n      delete this.hash[key];\r\n      this.length--;\r\n    }\r\n  }\r\n  hasKey(key: number): boolean {\r\n    return this.hash[key] !== undefined\r\n  }\r\n  *[Symbol.iterator](): IterableIterator<TValue> {\r\n    for (let key in this.hash) {\r\n      yield this.hash[key];\r\n    }\r\n  }\r\n}\r\n","import { Settings, Point } from \"./common\";\r\n\r\nexport const path = {\r\n    queue: new Array<Point>(Settings.size),\r\n    hash: Buffer.allocUnsafe(Settings.size),\r\n    distances: new Array<number>(Settings.size)\r\n}","import { IWorld, Point, CellType, Direction, Mask, Settings, Delta, delta, Dictionary } from \"./common\";\r\nimport { path } from \"./path\";\r\n\r\nconst foundMask = 0b00100000;\r\nconst clusterRadius: number = 9;\r\nconst clusterDistance: number = 15;\r\nconst maxDistance: number = 18;\r\nconst limit: number = 10000;\r\n\r\ninterface IIndex {\r\n    index: number;\r\n    marked: boolean;\r\n}\r\n\r\ninterface INode extends IIndex {\r\n    point: Point;\r\n    edgesLength: number;\r\n    clusterIndex?: number;\r\n}\r\n\r\ninterface ICluster extends IIndex {\r\n}\r\n\r\nconst pointsCompare = (a: Point, b: Point) => a - b;\r\nconst nodesCompare = (a: INode, b: INode) => a.point - b.point\r\nconst clustersCompare = (a: ICluster, b: ICluster) => a.index - b.index;\r\n\r\nexport interface IGraphSearchResult {\r\n    point: Point,\r\n    direction: Direction\r\n}\r\n\r\nexport class Graph {\r\n    private counter: number = 0;\r\n    private allDiamonds: Point[];\r\n    private nodes: INode[];\r\n    private nodeEdges: number[][];\r\n    private clusters: ICluster[];\r\n    private clusterEdges: number[][];\r\n    private clustersHash: Buffer;\r\n    private map: number[] = new Array<number>(Settings.size);\r\n    private temp: Point[];\r\n\r\n    constructor(private world: IWorld) {\r\n        const maxCount = this.world.diamonds + this.world.butterflies * 9;\r\n        this.allDiamonds = new Array<Point>(maxCount);\r\n        this.nodes = new Array<INode>(maxCount);\r\n        this.nodeEdges = new Array<number[]>(maxCount);\r\n        this.clusters = new Array<ICluster>(maxCount);\r\n        this.clusterEdges = new Array<number[]>(maxCount);\r\n        for (let i = 0; i < maxCount; i++) {\r\n            this.nodeEdges[i] = new Array<number>(maxCount);\r\n            this.clusterEdges[i] = new Array<number>(maxCount);\r\n        }\r\n        this.clustersHash = Buffer.allocUnsafe(maxCount);\r\n        this.temp = new Array<Point>(maxCount);\r\n    }\r\n\r\n    search(): IGraphSearchResult {\r\n        const cells = this.world.cells;\r\n        const nodes = this.nodes;\r\n        const nodeEdges = this.nodeEdges;\r\n        const clusters = this.clusters;\r\n        const clusterEdges = this.clusterEdges;\r\n\r\n        const nodesLength = this.findDiamonds(this.world.playerPoint, this.allDiamonds);\r\n        if (nodesLength === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const sortedDiamonds = this.allDiamonds.slice(0, nodesLength).sort(pointsCompare);\r\n\r\n        for (let index = 0; index < nodesLength; index++) {\r\n            const point = sortedDiamonds[index];\r\n            nodes[index] = {\r\n                index: index,\r\n                point: point,\r\n                edgesLength: 0,\r\n                marked: false\r\n            };\r\n            this.map[point] = index;\r\n        }\r\n\r\n        for (let i = 0; i < nodesLength; i++) {\r\n            const row = nodeEdges[i];\r\n            for (let j = 0; j < nodesLength; j++) {\r\n                row[j] = 0;\r\n            }\r\n        }\r\n\r\n        for (let nodeIndex = 0; nodeIndex < nodesLength; nodeIndex++) {\r\n            const node = nodes[nodeIndex];\r\n            for (let otherNodeIndex = 0; otherNodeIndex < nodesLength; otherNodeIndex++) {\r\n                const distance = nodeEdges[nodeIndex][otherNodeIndex];\r\n                if (distance > 0) {\r\n                    const otherNode = nodes[otherNodeIndex];\r\n                    cells[otherNode.point] |= foundMask;\r\n                }\r\n            }\r\n            const otherCount = this.findDiamonds(node.point, this.temp, clusterDistance);\r\n            for (let i = 0; i < otherCount; i++) {\r\n                const point = this.temp[i];\r\n                const newNodeIndex = this.map[point];\r\n                const foundNode = nodes[newNodeIndex];\r\n                const distance = path.distances[point];\r\n                nodeEdges[nodeIndex][newNodeIndex] = distance;\r\n                nodeEdges[newNodeIndex][nodeIndex] = distance;\r\n                node.edgesLength++;\r\n                foundNode.edgesLength++;\r\n            }\r\n            for (let otherNodeIndex = 0; otherNodeIndex < nodesLength; otherNodeIndex++) {\r\n                const otherNode = nodes[otherNodeIndex];\r\n                cells[otherNode.point] &= ~foundMask;\r\n            }\r\n        }\r\n\r\n        let clustersLength = 0;\r\n        while (true) {\r\n            let foundNode: INode;\r\n            let edgeLength: number = undefined;\r\n            for (let nodeIndex = 0; nodeIndex < nodesLength; nodeIndex++) {\r\n                const node = nodes[nodeIndex];\r\n                if (node.clusterIndex === undefined && (edgeLength === undefined || node.edgesLength < edgeLength)) {\r\n                    edgeLength = node.edgesLength;\r\n                    foundNode = node;\r\n                }\r\n            }\r\n            if (!foundNode) {\r\n                break;\r\n            }\r\n\r\n            const cluster: ICluster = { index: clustersLength, marked: false };\r\n            clusters[clustersLength++] = cluster;\r\n            foundNode.clusterIndex = cluster.index;\r\n            for (let nodeIndex = 0; nodeIndex < nodesLength; nodeIndex++) {\r\n                if (foundNode.index !== nodeIndex) {\r\n                    const distance = nodeEdges[foundNode.index][nodeIndex];\r\n                    if (distance > 0 && distance <= clusterRadius) {\r\n                        const otherNode = nodes[nodeIndex];\r\n                        if (otherNode.clusterIndex === undefined) {\r\n                            otherNode.clusterIndex = cluster.index;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < clustersLength; i++) {\r\n            const row = clusterEdges[i];\r\n            for (let j = 0; j < clustersLength; j++) {\r\n                row[j] = 0;\r\n            }\r\n        }\r\n        for (let clusterIndex = 0; clusterIndex < clustersLength; clusterIndex++) {\r\n            for (let nodeIndex = 0; nodeIndex < nodesLength; nodeIndex++) {\r\n                const node = nodes[nodeIndex];\r\n                if (node.clusterIndex !== clusterIndex) {\r\n                    continue;\r\n                }\r\n                for (let otherNodeIndex = 0; otherNodeIndex < nodesLength; otherNodeIndex++) {\r\n                    if (nodeIndex === otherNodeIndex) {\r\n                        continue;\r\n                    }\r\n                    const nodeDistance = nodeEdges[node.index][otherNodeIndex];\r\n                    if (nodeDistance > 0) {\r\n                        const otherNode = nodes[otherNodeIndex];\r\n                        const otherClusterIndex = otherNode.clusterIndex;\r\n                        if (clusterIndex !== otherClusterIndex) {\r\n                            const currentClusterDistance = clusterEdges[clusterIndex][otherClusterIndex];\r\n                            if (currentClusterDistance === 0 || nodeDistance < currentClusterDistance) {\r\n                                clusterEdges[clusterIndex][otherClusterIndex] = nodeDistance;\r\n                                clusterEdges[otherClusterIndex][clusterIndex] = nodeDistance;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const sortedClusters: ICluster[] = [];\r\n        this.clustersHash.fill(0);\r\n        for (let i = 0; i < nodesLength; i++) {\r\n            const point = this.allDiamonds[i];\r\n            const nodeIndex = this.map[point];\r\n            const node = nodes[nodeIndex];\r\n            const clusterIndex = node.clusterIndex;\r\n            if (this.clustersHash[clusterIndex] === 0) {\r\n                this.clustersHash[clusterIndex] = 1;\r\n                sortedClusters.push(clusters[clusterIndex]);\r\n            }\r\n        }\r\n\r\n        let firstCluster: ICluster;\r\n        let secondCluster: ICluster;\r\n        const clustersPath: ICluster[] = [];\r\n        const sortedClusters2 = sortedClusters.slice().sort(clustersCompare);\r\n        if (this.searchOptimalPath(sortedClusters, sortedClusters2, clusterEdges, clustersPath)) {\r\n            firstCluster = clustersPath[0];\r\n            secondCluster = clustersPath[1];\r\n        } else {\r\n            firstCluster = sortedClusters[0];\r\n            secondCluster = sortedClusters[1];\r\n        }\r\n        let filteredSortedNodes: INode[] = [];\r\n        for (let i = 0; i < nodesLength; i++) {\r\n            const point = this.allDiamonds[i];\r\n            const nodeIndex = this.map[point];\r\n            const node = nodes[nodeIndex];\r\n            if (node.clusterIndex === firstCluster.index) {\r\n                filteredSortedNodes.push(node);\r\n            }\r\n        }\r\n\r\n        if (secondCluster) {\r\n            const firstClusterIndex = firstCluster.index;\r\n            const secondClusterIndex = secondCluster.index;\r\n            const clusterDistance = clusterEdges[firstClusterIndex][secondClusterIndex];\r\n            if (clusterDistance > 0) {\r\n                let sourceNode: INode;\r\n                for (let nodeIndex = 0; nodeIndex < nodesLength; nodeIndex++) {\r\n                    const node = nodes[nodeIndex];\r\n                    if (node.clusterIndex !== firstClusterIndex) {\r\n                        continue;\r\n                    }\r\n                    for (let otherNodeIndex = 0; otherNodeIndex < nodesLength; otherNodeIndex++) {\r\n                        if (nodeIndex === otherNodeIndex) {\r\n                            continue;\r\n                        }\r\n                        const otherNode = nodes[otherNodeIndex];\r\n                        if (otherNode.clusterIndex === secondClusterIndex && nodeEdges[nodeIndex][otherNodeIndex] === clusterDistance) {\r\n                            sourceNode = node;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (sourceNode) {\r\n                        const index = filteredSortedNodes.indexOf(sourceNode);\r\n                        filteredSortedNodes.splice(index, 1);\r\n                        filteredSortedNodes.push(sourceNode);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let firstNode: INode;\r\n        const nodesPath: INode[] = [];\r\n        const filteredSortedNodes2 = filteredSortedNodes.slice().sort(nodesCompare);\r\n        if (this.searchOptimalPath(filteredSortedNodes, filteredSortedNodes2, nodeEdges, nodesPath)) {\r\n            firstNode = nodesPath[0];\r\n        } else {\r\n            firstNode = filteredSortedNodes[0];\r\n        }\r\n\r\n        const direction: Direction = this.findDirectionToPoint(this.world.playerPoint, firstNode.point);\r\n        return {\r\n            point: firstNode.point,\r\n            direction: direction\r\n        };\r\n    }\r\n\r\n    private searchOptimalPath(nodes: IIndex[], nodes2: IIndex[], edges: number[][], path: IIndex[]): boolean {\r\n        this.counter = 0;\r\n        const count = nodes.length;\r\n        for (let nodeIndex = 0; nodeIndex < count; nodeIndex++) {\r\n            const result = this.searchOptimalPathInternal(nodes[nodeIndex], nodes2, edges, count, path);\r\n            if (result) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private searchOptimalPathInternal(node: IIndex, nodes: IIndex[], edges: number[][], count: number, path: IIndex[]): boolean {\r\n        if (this.counter > limit) {\r\n            return false;\r\n        }\r\n        this.counter++;\r\n\r\n        path.push(node);\r\n        if (path.length === count) {\r\n            return true;\r\n        }\r\n        node.marked = true;\r\n\r\n        for (let otherNode of nodes) {\r\n            if (node === otherNode || otherNode.marked) {\r\n                continue;\r\n            }\r\n            const distance = edges[node.index][otherNode.index];\r\n            if (distance === 0 || distance > maxDistance) {\r\n                continue;\r\n            }\r\n            const result = this.searchOptimalPathInternal(otherNode, nodes, edges, count, path);\r\n            if (result) {\r\n                node.marked = false;\r\n                return true;\r\n            }\r\n        }\r\n        node.marked = false;\r\n        path.pop();\r\n        return false;\r\n    }\r\n\r\n    private findDiamonds(start: Point, found: Point[], radius?: number): number {\r\n        const cells = this.world.cells;\r\n        const hash = path.hash;\r\n        const queue = path.queue;\r\n        const distances = path.distances;\r\n\r\n        hash.fill(0);\r\n        hash[start] = 1;\r\n        distances[start] = 0;\r\n\r\n        let length = 0;\r\n        let index = 0;\r\n        queue[length++] = start;\r\n\r\n        let count = 0;\r\n        while (index < length) {\r\n            const point = queue[index++];\r\n            const distance = distances[point];\r\n            if (radius !== undefined && distance >= radius && count > 0) {\r\n                break;\r\n            }\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const newPoint = point + delta[dir];\r\n                if (newPoint < 0 || newPoint >= Settings.size || hash[newPoint] !== 0) {\r\n                    continue;\r\n                }\r\n                hash[newPoint] = 1;\r\n                distances[newPoint] = distance + 1;\r\n                const cell = cells[newPoint];\r\n                const cellType = cell & Mask.type;\r\n                if (cellType === CellType.Diamond && (cell & Mask.bad) === 0 && (cell & foundMask) === 0) {\r\n                    found[count++] = newPoint;\r\n                }\r\n                if (cellType === CellType.Nothing || cellType === CellType.Dirt || cellType === CellType.Diamond || cellType === CellType.Player) {\r\n                    queue[length++] = newPoint;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    private findDirectionToPoint(start: Point, target: Point): Direction {\r\n        const none: number = 255;\r\n        path.hash.fill(none);\r\n        path.hash[start] = Direction.Stay;\r\n\r\n        let length = 0;\r\n        let index = 0;\r\n        path.queue[length++] = start;\r\n\r\n        let found: Point;\r\n        while (!found && index < length) {\r\n            const point = path.queue[index++];\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const newPoint = point + delta[dir];\r\n                if (newPoint < 0 || newPoint >= Settings.size || path.hash[newPoint] !== none) {\r\n                    continue;\r\n                }\r\n                path.hash[newPoint] = dir;\r\n                if (newPoint === target) {\r\n                    found = newPoint;\r\n                    break;\r\n                }\r\n                const cell = this.world.cells[newPoint];\r\n                const cellType = cell & Mask.type;\r\n                if (cellType === CellType.Nothing || cellType === CellType.Dirt || cellType === CellType.Diamond) {\r\n                    path.queue[length++] = newPoint;\r\n                }\r\n            }\r\n        }\r\n        if (found) {\r\n            let point: Point = found;\r\n            let direction: Direction = Direction.Stay;\r\n            while (point !== start) {\r\n                direction = path.hash[point];\r\n                let backwardDirection: Direction = direction + 2;\r\n                if (backwardDirection > 3) {\r\n                    backwardDirection -= 4;\r\n                }\r\n                point += delta[backwardDirection];\r\n            }\r\n            return direction;\r\n        }\r\n        return Direction.Stay;\r\n    }\r\n\r\n}","import { Point, Cell, IWorld, IChangeSet, ICellDif } from \"./common\";\r\n\r\nexport class ChangeSet implements IChangeSet {\r\n    private cellDifs: ICellDif[] = new Array<ICellDif>(100);\r\n    private length: number = 0;\r\n\r\n    private frame: number;\r\n    private score: number;\r\n    private scoredExpiry: number;\r\n    private streak: number;\r\n    private streakExpiry: number;\r\n    private streaks: number;\r\n    private longestStreak: number;\r\n    private diamonds: number;\r\n    private diamondsCollected: number;\r\n    private butterflies: number;\r\n    private butterfliesKilled: number;\r\n    private playerPoint: Point;\r\n    private playerAlive: boolean;\r\n    private isSettled: boolean;\r\n\r\n    constructor(private world: IWorld) {\r\n    }\r\n\r\n    init(): void {\r\n        this.length = 0;\r\n        this.frame = this.world.frame;\r\n        this.score = this.world.score;\r\n        this.scoredExpiry = this.world.scoredExpiry;\r\n        this.streak = this.world.streak;\r\n        this.streakExpiry = this.world.streakExpiry;\r\n        this.streaks = this.world.streaks;\r\n        this.longestStreak = this.world.longestStreak;\r\n        this.diamonds = this.world.diamonds;\r\n        this.diamondsCollected = this.world.diamondsCollected;\r\n        this.butterflies = this.world.butterflies;\r\n        this.butterfliesKilled = this.world.butterfliesKilled;\r\n        this.isSettled = this.world.isSettled;\r\n        this.playerPoint = this.world.playerPoint;\r\n        this.playerAlive = this.world.playerAlive;\r\n    }\r\n\r\n    revert(): void {\r\n        this.world.frame = this.frame;\r\n        this.world.score = this.score;\r\n        this.world.scoredExpiry = this.scoredExpiry;\r\n        this.world.streak = this.streak;\r\n        this.world.streakExpiry = this.streakExpiry;\r\n        this.world.streaks = this.streaks;\r\n        this.world.longestStreak = this.longestStreak;\r\n        this.world.diamonds = this.diamonds;\r\n        this.world.diamondsCollected = this.diamondsCollected;\r\n        this.world.butterflies = this.butterflies;\r\n        this.world.butterfliesKilled = this.butterfliesKilled;\r\n        this.world.isSettled = this.isSettled;\r\n        this.world.playerPoint = this.playerPoint;\r\n        this.world.playerAlive = this.playerAlive;\r\n\r\n        for (let i = this.length - 1; i >= 0; i--) {\r\n            const dif = this.cellDifs[i];\r\n            this.world.cells[dif.point] = this.world.markCell(dif.old);\r\n        }\r\n    }\r\n\r\n    add(dif: ICellDif): void {\r\n        this.cellDifs[this.length++] = dif;\r\n    }\r\n}","import { IWorld, Pool, Direction, Settings, Point, delta, Cell, Score, StepAvailability, debug, Mask } from \"./common\";\r\nimport { ChangeSet } from \"./changeset\";\r\n\r\n\r\nexport interface IFitness {\r\n    calc(): number;\r\n}\r\n\r\nexport interface ISearchResult {\r\n    isFound: boolean;\r\n    direction: Direction;\r\n    steps: number[];\r\n}\r\n\r\ninterface IBestValue {\r\n    value: number;\r\n    depth: number;\r\n}\r\n\r\nexport class Search {\r\n    private changeSetPool: Pool<ChangeSet>;\r\n    private checkArray: Cell[];\r\n    private searchResult: ISearchResult;\r\n\r\n    constructor(private world: IWorld, private maxPossibleDepth: number) {\r\n        this.changeSetPool = new Pool<ChangeSet>(() => new ChangeSet(this.world), maxPossibleDepth);\r\n    }\r\n\r\n    depthFirstSearch(maxDepth: number, fitness: IFitness): ISearchResult {\r\n        if (debug) {\r\n            if (!this.checkArray) {\r\n                this.checkArray = new Array<Cell>(Settings.size);\r\n            }\r\n            for (let i = 0; i < Settings.size; i++) {\r\n                this.checkArray[i] = this.world.cells[i] & ~Mask.mark & ~Mask.bad;\r\n            }\r\n        }\r\n\r\n        //this.directionMap.fill(0);\r\n        this.depthFirstSearchInternal(0, maxDepth, fitness)\r\n\r\n        if (debug) {\r\n            for (let i = 0; i < Settings.size; i++) {\r\n                const original = this.checkArray[i];\r\n                const real = this.world.cells[i] & ~Mask.mark & ~Mask.bad;\r\n                if (original !== real) {\r\n                    throw new Error('failed!!!');\r\n                }\r\n            }\r\n        }\r\n        return this.searchResult;\r\n    }\r\n\r\n    private depthFirstSearchInternal(depth: number, maxDepth: number, fitness: IFitness, previousValue?: number, firstDepth?: number): IBestValue {\r\n        const world = this.world;\r\n        const currentValue = fitness.calc();\r\n        if (previousValue === undefined || currentValue > previousValue) {\r\n            firstDepth = depth;\r\n        }\r\n        if ((depth > 0 && currentValue === Score.dead) || depth >= maxDepth) {\r\n            return { value: currentValue, depth: firstDepth };\r\n        }\r\n\r\n        let best: IBestValue = { value: Score.dead, depth: 0 };\r\n        let bestDirection = Direction.Stay;\r\n        const oldPlayerPoint = world.playerPoint;\r\n\r\n        const steps: number[] = new Array<number>(5);\r\n        //for (let dir = 4; dir >= 0; dir--) {\r\n        for (let dir = 0; dir < 5; dir++) {\r\n            let directionIsSet: boolean = false;\r\n            //if ((this.directionMap[world.playerPoint] & (1 << dir)) > 0) {\r\n            //continue;\r\n            //}\r\n            //else {\r\n            //this.directionMap[world.playerPoint] |= (1 << dir);\r\n            //directionIsSet = true;\r\n            //}\r\n\r\n            let newFitness: number = undefined;\r\n            const stepAvailability = this.world.possibleStep(dir);\r\n            if (stepAvailability !== StepAvailability.Unavailable || dir === Direction.Stay) {\r\n                if (stepAvailability === StepAvailability.Death) {\r\n                    newFitness = Score.dead;\r\n                }\r\n\r\n                if (newFitness === undefined) {\r\n                    //start updating\r\n                    const changeSet = this.changeSetPool.getObject();\r\n                    changeSet.init();\r\n                    world.changeSet = changeSet;\r\n                    world.control(dir);\r\n                    world.update();\r\n                    //end updating\r\n\r\n                    if (dir === Direction.Stay || world.playerPoint !== oldPlayerPoint) {\r\n                        const result = this.depthFirstSearchInternal(depth + 1, maxDepth, fitness, currentValue, firstDepth);\r\n                        if (result.value > best.value || (result.value === best.value && result.depth < best.depth)) {\r\n                            best = result\r\n                            bestDirection = dir;\r\n                        }\r\n                        newFitness = result.value;\r\n                    }\r\n\r\n                    //start revert\r\n                    world.changeSet = undefined;\r\n                    changeSet.revert();\r\n                    this.changeSetPool.release(changeSet);\r\n                    //end revert\r\n                }\r\n                //if (directionIsSet) {\r\n                //this.directionMap[world.playerPoint] &= ~(1 << dir);\r\n                //}\r\n            }\r\n\r\n            steps[dir] = newFitness;\r\n\r\n            if (dir === Direction.Stay) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    if (steps[j] === undefined) {\r\n                        steps[j] = newFitness;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (depth === 0) {\r\n            this.searchResult = {\r\n                isFound: best.value !== currentValue,\r\n                direction: bestDirection,\r\n                steps: steps\r\n            }\r\n        }\r\n        return best;\r\n    }\r\n}","import { IWorld, Pool, Direction, Score, StepAvailability, Settings, Point, CellType, Mask, delta, Cell, Delta, ccw, cw } from \"./common\";\r\nimport { Graph } from \"./graph\";\r\nimport { path } from \"./path\";\r\nimport { IFitness, Search } from \"./search\";\r\n\r\nconst maxButterflyFrameCount: number = 120;\r\nconst maxWaiting = 14;\r\n\r\nclass ButterflyFitness implements IFitness {\r\n    constructor(private world: IWorld) {\r\n    }\r\n\r\n    calc(): number {\r\n        if (!this.world.playerAlive || this.world.isDead()) {\r\n            return Score.dead;\r\n        }\r\n        if (this.world.isLocked()) {\r\n            return Score.locked;\r\n        }\r\n        return this.world.diamonds;\r\n    }\r\n}\r\n\r\nclass ScoreFitness implements IFitness {\r\n    constructor(private world: IWorld) {\r\n    }\r\n\r\n    calc(): number {\r\n        if (!this.world.playerAlive || this.world.isDead()) {\r\n            return Score.dead;\r\n        }\r\n        return this.world.score;\r\n    }\r\n}\r\n\r\nclass EmptyFitness implements IFitness {\r\n    constructor(private world: IWorld) {\r\n    }\r\n\r\n    calc(): number {\r\n        if (!this.world.playerAlive || this.world.isDead()) {\r\n            return Score.dead;\r\n        }\r\n        if (this.world.isLocked()) {\r\n            return Score.locked;\r\n        }\r\n        return this.world.butterfliesKilled;\r\n    }\r\n}\r\n\r\nclass UnlockFitness implements IFitness {\r\n    constructor(private world: IWorld) {\r\n    }\r\n\r\n    calc(): number {\r\n        if (!this.world.playerAlive || this.world.isDead()) {\r\n            return Score.dead;\r\n        }\r\n        if (this.world.isLocked()) {\r\n            return Score.locked;\r\n        }\r\n        if (this.world.isPlayerClosed()) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n\r\ninterface IStepHistory {\r\n    point: Point;\r\n    direction: Direction;\r\n}\r\n\r\nconst enum State {\r\n    ButterflyKilling,\r\n    BadButterflyKilling,\r\n    DiamondsCollecting,\r\n    BadDiamondsCollecting,\r\n    Waiting,\r\n    Unlocking,\r\n    GameOver\r\n}\r\n\r\nexport class AI {\r\n    private state: State;\r\n    private previousState: State;\r\n    private waiting: number = maxWaiting;\r\n    private history: IStepHistory[] = new Array<IStepHistory>(Settings.frames);\r\n    private startHistoryFrame: number = 0;\r\n\r\n    private badButterflies: number = 0;\r\n    private badDiamonds: number = 0;\r\n\r\n    private oldButterfliesKilled: number;\r\n    private oldDiamondsCollected: number;\r\n    private butterflyJustKilled: boolean;\r\n    private butterflyStartFrame: number;\r\n    private rejectCounter: number = 0;\r\n    private graphSearchCalled: boolean = false;\r\n\r\n    private butterflyFitness: IFitness;\r\n    private emptyFitness: IFitness;\r\n    private scoreFitness: IFitness;\r\n    private unlockFitness: IFitness;\r\n\r\n    private search: Search;\r\n    private graph: Graph;\r\n\r\n    constructor(private world: IWorld, private maxDepth: number) {\r\n        this.search = new Search(world, maxDepth);\r\n        this.graph = new Graph(world);\r\n\r\n        this.butterflyFitness = new ButterflyFitness(world);\r\n        this.emptyFitness = new EmptyFitness(world);\r\n        this.scoreFitness = new ScoreFitness(world);\r\n        this.unlockFitness = new UnlockFitness(world);\r\n\r\n        this.oldButterfliesKilled = world.butterfliesKilled;\r\n        this.oldDiamondsCollected = world.diamondsCollected;\r\n        this.butterflyStartFrame = world.frame;\r\n        this.state = State.ButterflyKilling;\r\n        this.previousState = this.state;\r\n    }\r\n\r\n    process(): Direction {\r\n        const world = this.world;\r\n\r\n        this.butterflyJustKilled = world.butterfliesKilled > this.oldButterfliesKilled;\r\n        if (this.butterflyJustKilled) {\r\n            this.butterflyStartFrame = this.world.frame;\r\n        }\r\n\r\n        this.updateState();\r\n\r\n        let direction: Direction = Direction.Stay;\r\n        switch (this.state) {\r\n            case State.ButterflyKilling:\r\n            case State.BadButterflyKilling:\r\n                direction = this.searchButterfly();\r\n                break;\r\n            case State.DiamondsCollecting:\r\n            case State.BadDiamondsCollecting:\r\n                direction = this.searchDiamond();\r\n                break;\r\n            case State.Waiting:\r\n                direction = this.wait();\r\n                break;\r\n            case State.Unlocking:\r\n                direction = this.unlock();\r\n                break;\r\n            case State.GameOver:\r\n                direction = Direction.Stay;\r\n                break;\r\n        }\r\n\r\n        this.oldButterfliesKilled = world.butterfliesKilled;\r\n        this.oldDiamondsCollected = world.diamondsCollected;\r\n\r\n        this.history[world.frame] = { point: world.playerPoint, direction: direction };\r\n\r\n        return direction;\r\n    }\r\n\r\n    private updateState(): void {\r\n        const world = this.world;\r\n        if (world.diamonds === 0 && world.butterflies === 0) {\r\n            this.goTo(State.GameOver);\r\n            return;\r\n        }\r\n\r\n        const isPlayerClosed = world.isPlayerClosed();\r\n        let previousState: State;\r\n        do {\r\n            previousState = this.state;\r\n\r\n            if (isPlayerClosed) {\r\n                this.goTo(State.Unlocking);\r\n            }\r\n\r\n            switch (this.state) {\r\n                case State.ButterflyKilling:\r\n                    if (world.butterflies > 0) {\r\n                        if (world.butterflies === this.badButterflies) {\r\n                            this.goTo(State.BadButterflyKilling);\r\n                        }\r\n                    } else {\r\n                        this.goTo(State.DiamondsCollecting);\r\n                    }\r\n                    break;\r\n                case State.BadButterflyKilling:\r\n                    if (world.butterflies === this.badButterflies) {\r\n                        this.goTo(State.DiamondsCollecting);\r\n                    }\r\n                    break;\r\n                case State.DiamondsCollecting:\r\n                    if (world.diamonds > 0) {\r\n                        if (world.diamonds === this.badDiamonds) {\r\n                            this.goTo(State.BadDiamondsCollecting);\r\n                        }\r\n                    } else {\r\n                        this.goTo(State.BadButterflyKilling);\r\n                    }\r\n                    break;\r\n                case State.BadDiamondsCollecting:\r\n                    if (world.diamonds === this.badDiamonds) {\r\n                        this.goTo(State.BadButterflyKilling);\r\n                    }\r\n                    break;\r\n                case State.Waiting:\r\n                    if (this.butterflyJustKilled) {\r\n                        this.goTo(State.Waiting, true);\r\n                    }\r\n                    if (this.waiting <= 0) {\r\n                        this.goTo(State.DiamondsCollecting);\r\n                    }\r\n                    break;\r\n                case State.Unlocking:\r\n                    if (!isPlayerClosed) {\r\n                        this.goTo(this.previousState);\r\n                    }\r\n                    break;\r\n                case State.GameOver:\r\n                    break;\r\n            }\r\n        }\r\n        while (previousState !== this.state)\r\n    }\r\n\r\n    private goTo(state: State, force: boolean = false): void {\r\n        const currentState: State = this.state;\r\n        if (this.state !== state || force) {\r\n            this.state = state;\r\n            //initializing\r\n            this.rejectCounter = 0;\r\n            this.startHistoryFrame = this.world.frame;\r\n            switch (state) {\r\n                case State.ButterflyKilling:\r\n                    break;\r\n                case State.BadButterflyKilling:\r\n                    this.resetButterflies();\r\n                    break;\r\n                case State.DiamondsCollecting:\r\n                    this.graphSearchCalled = false;\r\n                    if (this.butterflyJustKilled) {\r\n                        this.goTo(State.Waiting);\r\n                    }\r\n                    break;\r\n                case State.BadDiamondsCollecting:\r\n                    this.resetDiamonds();\r\n                    break;\r\n                case State.Waiting:\r\n                    this.waiting = maxWaiting;\r\n                    break;\r\n                case State.Unlocking:\r\n                    this.previousState = currentState;\r\n                    break;\r\n                case State.GameOver:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private searchButterfly(): Direction {\r\n        const maxDepth = this.world.frame < 2 ? this.maxDepth - 1 : this.maxDepth;\r\n        const searchResult = this.search.depthFirstSearch(maxDepth, this.butterflyFitness);\r\n        if (!searchResult.isFound) {\r\n            let direction: Direction = Direction.Stay;\r\n            const foundResult = this.findDirectionToButterfly(true) || this.findDirectionToButterfly(false);\r\n            if (foundResult) {\r\n                this.rejectCounter = 0;\r\n                direction = foundResult.direction;\r\n                if (this.world.frame - this.butterflyStartFrame > maxButterflyFrameCount || this.checkLoop()) {\r\n                    this.rejectButterfly(foundResult.point);\r\n                    this.startHistoryFrame = this.world.frame;\r\n                    this.butterflyStartFrame = this.world.frame;\r\n                }\r\n            } else {\r\n                if (this.rejectCounter++ >= 2) {\r\n                    this.rejectAllButterflies();\r\n                }\r\n            }\r\n\r\n            if (searchResult.steps[direction] >= 0) {\r\n                return direction;\r\n            }\r\n        }\r\n        return searchResult.direction;\r\n    }\r\n\r\n    private searchDiamond(): Direction {\r\n        const maxDepth = this.world.butterflies === 0 || !this.graphSearchCalled ? this.maxDepth - 1 : this.maxDepth;\r\n        const searchResult = this.search.depthFirstSearch(maxDepth, this.emptyFitness);\r\n        if (!searchResult.isFound) {\r\n            const graphResult = this.graph.search();\r\n            this.graphSearchCalled = true;\r\n            const direction: Direction = graphResult ? graphResult.direction : Direction.Stay;\r\n            if (graphResult) {\r\n                this.rejectCounter = 0;\r\n                if (this.checkLoop()) {\r\n                    this.rejectDiamond(graphResult.point);\r\n                    this.startHistoryFrame = this.world.frame;\r\n                }\r\n            } else {\r\n                if (this.rejectCounter++ >= 2) {\r\n                    this.rejectAllDiamonds();\r\n                }\r\n            }\r\n            if (searchResult.steps[direction] >= 0) {\r\n                return direction;\r\n            }\r\n        }\r\n        return searchResult.direction;\r\n    }\r\n\r\n    private searchBadDiamond(): Direction {\r\n        const searchResult = this.search.depthFirstSearch(this.maxDepth, this.scoreFitness);\r\n        if (!searchResult.isFound) {\r\n        }\r\n        return searchResult.direction;\r\n    }\r\n\r\n    private unlock(): Direction {\r\n        const searchResult = this.search.depthFirstSearch(this.maxDepth - 1, this.unlockFitness);\r\n        if (!searchResult.isFound) {\r\n            let direction: Direction = Math.floor(Math.random() * 4);\r\n            for (let i = 0; i < 4; i++) {\r\n                direction = direction + i;\r\n                if (direction >= 4) {\r\n                    direction -= 4;\r\n                }\r\n                if (searchResult.steps[direction] >= 0 && this.world.possibleStep(direction) === StepAvailability.Available) {\r\n                    return direction;\r\n                }\r\n            }\r\n        }\r\n        return searchResult.direction;\r\n    }\r\n\r\n    private wait(): Direction {\r\n        this.waiting--;\r\n        const searchResult = this.search.depthFirstSearch(this.maxDepth, this.emptyFitness);\r\n        if (!searchResult.isFound) {\r\n            const direction: Direction = Direction.Stay;\r\n\r\n            if (searchResult.steps[direction] >= 0) {\r\n                return direction;\r\n            }\r\n        }\r\n        return searchResult.direction;\r\n    }\r\n\r\n    private findDirectionToButterfly(strict: boolean): { point: Point, direction: Direction, distance: number } {\r\n        const none: number = 255;\r\n        const start: Point = this.world.playerPoint;\r\n        path.hash.fill(none);\r\n        path.hash[start] = Direction.Stay;\r\n\r\n        let length = 0;\r\n        let index = 0;\r\n        path.queue[length++] = start;\r\n\r\n        let found: Point;\r\n        while (!found && index < length) {\r\n            const point = path.queue[index++];\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const newPoint = point + delta[dir];\r\n                if (newPoint < 0 || newPoint >= Settings.size || path.hash[newPoint] !== none) {\r\n                    continue;\r\n                }\r\n                path.hash[newPoint] = dir;\r\n                const cell = this.world.cells[newPoint];\r\n                const cellType = cell & Mask.type;\r\n                if (cellType === CellType.Butterfly && (cell & Mask.bad) === 0) {\r\n                    found = newPoint;\r\n                    break;\r\n                }\r\n                if (cellType === CellType.Nothing || cellType === CellType.Dirt || cellType === CellType.Player || (!strict && cellType === CellType.Diamond)) {\r\n                    path.queue[length++] = newPoint;\r\n                }\r\n            }\r\n        }\r\n        if (found) {\r\n            let distance: number = 0;\r\n            let point: Point = found;\r\n            let direction: Direction = Direction.Stay;\r\n            while (point !== start) {\r\n                direction = path.hash[point];\r\n                let backwardDirection: Direction = direction + 2;\r\n                if (backwardDirection > 3) {\r\n                    backwardDirection -= 4;\r\n                }\r\n                point += delta[backwardDirection];\r\n                distance++;\r\n            }\r\n            return { point: found, direction: direction, distance: distance };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private rejectButterfly(point: Point) {\r\n        this.world.cells[point] |= Mask.bad;\r\n        this.badButterflies++;\r\n    }\r\n\r\n    private rejectDiamond(point: Point) {\r\n        this.world.cells[point] |= Mask.bad;\r\n        this.badDiamonds++;\r\n    }\r\n\r\n    private rejectAllButterflies() {\r\n        const cells = this.world.cells;\r\n        for (let point = Settings.start; point <= Settings.end; point++) {\r\n            if ((cells[point] & Mask.type) === CellType.Butterfly) {\r\n                cells[point] |= Mask.bad;\r\n            }\r\n        }\r\n        this.badButterflies = this.world.butterflies;\r\n    }\r\n\r\n    private rejectAllDiamonds() {\r\n        const cells = this.world.cells;\r\n        for (let point = Settings.start; point <= Settings.end; point++) {\r\n            if ((cells[point] & Mask.type) === CellType.Diamond) {\r\n                cells[point] |= Mask.bad;\r\n            }\r\n        }\r\n        this.badDiamonds = this.world.diamonds;\r\n    }\r\n\r\n    private resetButterflies() {\r\n        const cells = this.world.cells;\r\n        for (let point = Settings.start; point <= Settings.end; point++) {\r\n            if ((cells[point] & Mask.type) === CellType.Butterfly) {\r\n                cells[point] &= ~Mask.bad;\r\n            }\r\n        }\r\n        this.badButterflies = 0;\r\n    }\r\n\r\n    private resetDiamonds() {\r\n        const cells = this.world.cells;\r\n        for (let point = Settings.start; point <= Settings.end; point++) {\r\n            if ((cells[point] & Mask.type) === CellType.Diamond) {\r\n                cells[point] &= ~Mask.bad;\r\n            }\r\n        }\r\n        this.badDiamonds = 0;\r\n    }\r\n\r\n    private checkLoop(): boolean {\r\n        const maxSteps = 10;\r\n        const loops = 3;\r\n        let index = this.world.frame - 1;\r\n        if (index < this.startHistoryFrame) {\r\n            return false;\r\n        }\r\n        let steps: number = 1;\r\n        while (index >= 0 && steps < maxSteps) {\r\n            if (this.checkLoopInternal(index, steps, loops)) {\r\n                return true;\r\n            }\r\n            steps++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private checkLoopInternal(lastIndex: number, steps: number, loops: number): boolean {\r\n        let index = lastIndex - (loops * steps);\r\n        if (index < this.startHistoryFrame) {\r\n            return false;\r\n        }\r\n        const maxIndex = lastIndex - steps;\r\n        while (index <= maxIndex) {\r\n            const history1 = this.history[index];\r\n            const history2 = this.history[index + steps];\r\n            if (history1.point !== history2.point || history1.direction !== history2.direction) {\r\n                return false;\r\n            }\r\n            index++;\r\n        }\r\n        return true;\r\n    }\r\n}","import { CellType, Point, Direction, cw, ccw, StepAvailability, Cell, IWorld, Mask, Offset, Settings, Delta, delta, Score, IChangeSet } from \"./common\";\r\nimport { path } from \"./path\";\r\n\r\nconst _points: Point[] = new Array<Point>(4);\r\nconst _neighbors: Cell[] = new Array<Cell>(4);\r\n\r\nexport class World implements IWorld {\r\n    cells: Cell[];\r\n    frame: number = 0;\r\n    score: number = 0;\r\n    scoredExpiry: number = 0;\r\n    streak: number = 0;\r\n    streakExpiry: number = 0;\r\n    streaks: number = 0;\r\n    longestStreak: number = 0;\r\n    diamonds: number = 0;\r\n    diamondsCollected: number = 0;\r\n    butterflies: number = 0;\r\n    butterfliesKilled: number = 0;\r\n    playerPoint: Point;\r\n    playerAlive: boolean = true;\r\n    isSettled: boolean = false;\r\n    changeSet: IChangeSet;\r\n\r\n    private mark: boolean = false; //don't revert!\r\n    private playerDirection: Direction = Direction.Stay;\r\n\r\n    constructor(private screen: string[]) {\r\n        this.cells = new Array<Cell>(Settings.size);\r\n        for (let y = 0; y < Settings.height; y++) {\r\n            for (let x = 0; x < Settings.width; x++) {\r\n                const point = y * Settings.width + x;\r\n                const cell = this.createCell(screen[y][x]);\r\n                const type = cell & Mask.type;\r\n                switch (type) {\r\n                    case CellType.Player:\r\n                        this.playerPoint = point;\r\n                        break;\r\n                    case CellType.Diamond:\r\n                        this.diamonds++;\r\n                        break;\r\n                    case CellType.Butterfly:\r\n                        this.butterflies++;\r\n                        break;\r\n                }\r\n                this.cells[point] = cell;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(): void {\r\n        this.frame++;\r\n        if (this.streak) {\r\n            if (!--this.streakExpiry) {\r\n                this.streak = 0;\r\n                this.isSettled = true;\r\n            } else {\r\n                this.isSettled = false;\r\n            }\r\n        }\r\n        if (this.scoredExpiry) {\r\n            this.scoredExpiry--;\r\n        }\r\n\r\n        this.mark = !this.mark;\r\n        for (let point = Settings.start; point <= Settings.end; point++) {\r\n            const cell = this.cells[point];\r\n            if (cell === CellType.Nothing || cell === CellType.Steel || cell === CellType.Dirt || cell === CellType.Brick) {\r\n                continue;\r\n            }\r\n            this.updateCell(point, cell);\r\n            if (this.isSettled && !this.isCellSettled(cell)) {\r\n                this.isSettled = false;\r\n            }\r\n        }\r\n        if (this.frame >= Settings.frames) {\r\n            this.playerAlive = false;\r\n        }\r\n    }\r\n\r\n    markCell(cell: Cell): Cell {\r\n        if (cell === CellType.Nothing || cell === CellType.Steel || cell === CellType.Dirt || cell === CellType.Brick) {\r\n            return cell;\r\n        }\r\n        if (this.mark) {\r\n            return cell | Mask.mark;\r\n        }\r\n        return cell & ~Mask.mark;\r\n    }\r\n\r\n    private set(point: Point, cell: Cell, mark: boolean = true): void {\r\n        let old = this.cells[point];\r\n        if (mark) {\r\n            cell = this.markCell(cell);\r\n        }\r\n        this.cells[point] = cell;\r\n        if (this.changeSet) {\r\n            this.changeSet.add({ point: point, old: old });\r\n        }\r\n    }\r\n\r\n    private updateLooseThing(point: Point, cell: Cell): Cell {\r\n        const under = point + Delta.down;\r\n        const target = this.cells[under];\r\n        if (target !== CellType.Nothing) {\r\n            if (this.isRounded(target)\r\n                && (this.roll(cell, point, point + Delta.left)\r\n                    || this.roll(cell, point, point + Delta.right))) {\r\n                return undefined;\r\n            }\r\n            if ((cell & Mask.falling) > 0) {\r\n                this.set(point, cell & ~Mask.falling);\r\n                this.hit(under, target);\r\n                return undefined;\r\n            }\r\n            return cell;\r\n        }\r\n        this.set(point, CellType.Nothing);\r\n        this.set(under, cell | Mask.falling);\r\n        return undefined;\r\n    }\r\n\r\n    private updateExplosion(point: Point, cell: Cell): Cell {\r\n        let stage = (cell & Mask.stage) >> Offset.stage;\r\n        if (++stage > 3) {\r\n            this.set(point, CellType.Diamond);\r\n            return undefined;\r\n        }\r\n        return (cell & ~Mask.stage) | (stage << Offset.stage);\r\n    }\r\n\r\n    private updateButterfly(point: Point, cell: Cell): Cell {\r\n        for (let i = 0; i < 4; i++) {\r\n            _points[i] = point + delta[i];\r\n            _neighbors[i] = this.cells[_points[i]];\r\n        }\r\n        let locked = true;\r\n        for (let neighbor of _neighbors) {\r\n            if (neighbor === CellType.Nothing) {\r\n                locked = false;\r\n            }\r\n            else if ((neighbor & Mask.type) === CellType.Player) {\r\n                this.explode(point);\r\n                return undefined;\r\n            }\r\n        }\r\n        if (locked) {\r\n            this.explode(point);\r\n            return undefined;\r\n        }\r\n\r\n        const direction = (cell & Mask.direction) >> Offset.direction;\r\n        const left = ccw(direction);\r\n        if (_neighbors[left] === CellType.Nothing) {\r\n            this.set(point, CellType.Nothing);\r\n            this.set(_points[left], (cell & ~Mask.direction) | (left << Offset.direction));\r\n            return undefined;\r\n        }\r\n        if (_neighbors[direction] === CellType.Nothing) {\r\n            this.move(point, _points[direction]);\r\n            return undefined;\r\n        }\r\n        const newDirection = cw(direction);\r\n        return (cell & ~Mask.direction) | (newDirection << Offset.direction);\r\n\r\n    }\r\n\r\n    private updatePlayer(point: Point, cell: Cell): Cell {\r\n        if (!this.playerAlive || this.playerDirection === Direction.Stay) {\r\n            return cell;\r\n        }\r\n        const to = point + delta[this.playerDirection];\r\n        const target = this.cells[to];\r\n        if (target === CellType.Nothing || this.walkInto(target, to, this.playerDirection)) {\r\n            this.move(point, to);\r\n            this.playerPoint = to;\r\n            return undefined;\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    private updateCell(point: Point, cell: Cell): void {\r\n        if (this.mark === ((cell & Mask.mark) > 0)) {\r\n            return;\r\n        }\r\n        const type = cell & Mask.type;\r\n        let newCell: Cell;\r\n        switch (type) {\r\n            case CellType.Boulder:\r\n            case CellType.Diamond:\r\n                newCell = this.updateLooseThing(point, cell);\r\n                break;\r\n            case CellType.Explosion:\r\n                newCell = this.updateExplosion(point, cell);\r\n                break;\r\n            case CellType.Butterfly:\r\n                newCell = this.updateButterfly(point, cell);\r\n                break;\r\n            case CellType.Player:\r\n                newCell = this.updatePlayer(point, cell);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        if (newCell !== undefined) {\r\n            if (cell !== newCell) {\r\n                this.set(point, newCell);\r\n            } else {\r\n                this.cells[point] = this.markCell(newCell);\r\n            }\r\n        }\r\n    }\r\n\r\n    private move(point: Point, to: Point, mark: boolean = true): void {\r\n        const cell = this.cells[point];\r\n        this.set(point, CellType.Nothing);\r\n        this.set(to, cell, mark);\r\n    }\r\n\r\n    private isRounded(cell: Cell): boolean {\r\n        const type = cell & Mask.type;\r\n        if (type === CellType.Brick) {\r\n            return true;\r\n        } else if (type === CellType.Boulder || type === CellType.Diamond) {\r\n            return (cell & Mask.falling) === 0\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isConsumable(cell: Cell): boolean {\r\n        const type = cell & Mask.type;\r\n        return !(type === CellType.Explosion || type === CellType.Steel);\r\n    }\r\n\r\n    private isCellSettled(cell: Cell): boolean {\r\n        const type = cell & Mask.type;\r\n        if (type === CellType.Explosion) {\r\n            return false;\r\n        }\r\n        return (cell & Mask.falling) === 0;\r\n    }\r\n\r\n    private hit(point: Point, cell: Cell): void {\r\n        const type = cell & Mask.type;\r\n        if (type === CellType.Butterfly) {\r\n            this.explode(point)\r\n        } else if (type === CellType.Player) {\r\n            this.playerAlive = false;\r\n        }\r\n    }\r\n\r\n    private roll(cell: Cell, point: Point, to: Point): boolean {\r\n        if (this.cells[to] !== CellType.Nothing || this.cells[to + Delta.down] !== CellType.Nothing) {\r\n            return false;\r\n        }\r\n        this.set(point, CellType.Nothing);\r\n        this.set(to, cell | Mask.falling);\r\n        return true;\r\n    }\r\n\r\n    private walkInto(cell: Cell, point: Point, direction: Direction): boolean {\r\n        const type = cell & Mask.type;\r\n        if (type === CellType.Dirt) {\r\n            return true;\r\n        } else if (type === CellType.Diamond) {\r\n            this.diamondCollected();\r\n            return true;\r\n        } else if (type === CellType.Boulder) {\r\n            if ((cell & Mask.falling) > 0 || direction === Direction.Up || direction === Direction.Down) {\r\n                return false;\r\n            }\r\n            const to = point + delta[direction];\r\n            if (this.cells[to] === CellType.Nothing) {\r\n                this.move(point, to, false);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private explode(cellPoint: Point): void {\r\n        this.set(cellPoint, CellType.ButterflyKilled, false);\r\n        for (let y = -1; y <= 1; y++) {\r\n            const startPoint = cellPoint + y * Settings.width - 1;\r\n            const endPoint = startPoint + 2;\r\n            for (let point = startPoint; point <= endPoint; point++) {\r\n                const target = this.cells[point];\r\n                if (target !== CellType.Nothing) {\r\n                    if (!this.isConsumable(target)) {\r\n                        continue;\r\n                    }\r\n                    if (point !== cellPoint) {\r\n                        this.hit(point, target);\r\n                    }\r\n                }\r\n                const targetType = this.cells[point] & Mask.type;\r\n                if (targetType !== CellType.Diamond && targetType !== CellType.Explosion) {\r\n                    this.diamonds++;\r\n                }\r\n                this.set(point, CellType.Explosion);\r\n            }\r\n        }\r\n        this.butterflyKilled();\r\n    }\r\n\r\n    private diamondCollected(): void {\r\n        this.score++;\r\n        this.diamonds--;\r\n        this.diamondsCollected++;\r\n        this.streak++;\r\n        this.streakExpiry = 20;\r\n        this.scoredExpiry = 8;\r\n        if (this.streak < 3) {\r\n            return;\r\n        }\r\n        if (this.streak === 3) {\r\n            this.streaks++;\r\n        }\r\n        if (this.longestStreak < this.streak) {\r\n            this.longestStreak = this.streak;\r\n        }\r\n        for (let i = 2; i * i <= this.streak; i++) {\r\n            if (this.streak % i === 0) {\r\n                return;\r\n            }\r\n        }\r\n        // streak is a prime number\r\n        this.score += this.streak;\r\n    }\r\n\r\n    private butterflyKilled(): void {\r\n        if (!this.playerAlive) {// no reward if player killed\r\n            return;\r\n        }\r\n        this.butterflies--;\r\n        this.butterfliesKilled++;\r\n        this.score += 10;\r\n        this.scoredExpiry = 8;\r\n    }\r\n\r\n    control(direction: Direction): void {\r\n        this.playerDirection = direction;\r\n    }\r\n\r\n    isFinal(): boolean {\r\n        return !this.playerAlive && this.isSettled;\r\n    }\r\n\r\n    isDead(): boolean {\r\n        const upCell = this.cells[this.playerPoint + Delta.up];\r\n        const type = upCell & Mask.type;\r\n        return type === CellType.Butterfly || (type === CellType.Boulder && (upCell & Mask.falling) > 0);\r\n    }\r\n\r\n    possibleStep(direction: Direction): StepAvailability {\r\n        if (direction === Direction.Stay) {\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const point = this.playerPoint + delta[dir];\r\n                const cell = this.cells[point];\r\n                const cellType = cell & Mask.type;\r\n                if (cellType === CellType.Butterfly) {\r\n                    return StepAvailability.Death;\r\n                }\r\n                if (dir === Direction.Up) {\r\n                    if ((cell & Mask.falling) > 0) {\r\n                        return StepAvailability.Death;\r\n                    }\r\n                    if (cell === CellType.Nothing) {\r\n                        if ((this.cells[point + Delta.up] & Mask.type) === CellType.Boulder) {\r\n                            return StepAvailability.Death;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return StepAvailability.Available;\r\n        }\r\n        const targetPoint = this.playerPoint + delta[direction];\r\n        const targetCell = this.cells[targetPoint];\r\n        const targetType = targetCell & Mask.type;\r\n        if (targetType === CellType.Butterfly) {\r\n            return StepAvailability.Death;\r\n        }\r\n        if (targetType === CellType.Steel || targetType === CellType.Brick\r\n            || (direction !== Direction.Left && targetType === CellType.Explosion)) {\r\n            return StepAvailability.Unavailable;\r\n        }\r\n        if (direction === Direction.Up) {\r\n            if (targetType === CellType.Boulder) {\r\n                return StepAvailability.Unavailable;\r\n            }\r\n        }\r\n        if (direction === Direction.Right) {\r\n            if (targetType === CellType.Boulder && ((targetCell & Mask.falling) > 0 || this.cells[targetPoint + Delta.right] !== CellType.Nothing)) {\r\n                return StepAvailability.Unavailable;\r\n            }\r\n        }\r\n        if (direction === Direction.Down) {\r\n            if (targetType === CellType.Boulder) {\r\n                return StepAvailability.Unavailable;\r\n            }\r\n        }\r\n        if (direction === Direction.Left) {\r\n            if (targetType === CellType.Boulder\r\n                && this.cells[targetPoint + Delta.left] !== CellType.Nothing\r\n                && this.cells[targetPoint + Delta.down] !== CellType.Nothing) {\r\n                return StepAvailability.Unavailable;\r\n            }\r\n            if (targetType === CellType.Explosion) {\r\n                const stage = (targetCell & Mask.stage) >> Offset.stage;\r\n                if (stage < 3) {\r\n                    return StepAvailability.Unavailable;\r\n                }\r\n            }\r\n        }\r\n        return StepAvailability.Available;\r\n    }\r\n\r\n    isPlayerClosed(): boolean {\r\n        path.hash.fill(0);\r\n        path.hash[this.playerPoint] = 1;\r\n\r\n        let length = 0;\r\n        let index = 0;\r\n        path.queue[length++] = this.playerPoint;\r\n\r\n        while (index < length) {\r\n            const point = path.queue[index++];\r\n            if (index >= 20) {\r\n                return false;\r\n            }\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const newPoint = point + delta[dir];\r\n                if (newPoint < 0 || newPoint >= Settings.size || path.hash[newPoint] > 0) {\r\n                    continue;\r\n                }\r\n                path.hash[newPoint] = 1;\r\n                const cellType = this.cells[newPoint] & Mask.type;\r\n                if (cellType === CellType.Nothing || cellType === CellType.Dirt || cellType === CellType.Diamond) {\r\n                    path.queue[length++] = newPoint;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isLocked(): boolean {\r\n        path.hash.fill(0);\r\n        path.hash[this.playerPoint] = 1;\r\n\r\n        let length = 0;\r\n        let index = 0;\r\n        path.queue[length++] = this.playerPoint;\r\n\r\n        while (index < length) {\r\n            const point = path.queue[index++];\r\n            if (index >= 10) {\r\n                return false;\r\n            }\r\n            for (let dir = 0; dir < 4; dir++) {\r\n                const newPoint = point + delta[dir];\r\n                if (newPoint < 0 || newPoint >= Settings.size || path.hash[newPoint] > 0) {\r\n                    continue;\r\n                }\r\n                path.hash[newPoint] = 1;\r\n                if (this.isStepAvailable(point, dir)) {\r\n                    path.queue[length++] = newPoint;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private isStepAvailable(point: Point, direction: Direction): boolean {\r\n        const offset = delta[direction];\r\n        const targetPoint = point + offset;\r\n        const targetCell = this.cells[targetPoint];\r\n        const targetType = targetCell & Mask.type;\r\n        if (targetType === CellType.Steel || targetType === CellType.Brick) {\r\n            return false;\r\n        }\r\n        if (direction === Direction.Up || direction === Direction.Down) {\r\n            if (targetType === CellType.Boulder)\r\n                return false;\r\n        } else if (targetType === CellType.Boulder\r\n            && this.cells[targetPoint + offset] !== CellType.Nothing\r\n            && this.cells[targetPoint + Delta.down] !== CellType.Nothing) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private createCell(c: string): Cell {\r\n        switch (c) {\r\n            case ' ': return CellType.Nothing;\r\n            case '#': return CellType.Steel;\r\n            case '+': return CellType.Brick;\r\n            case ':': return CellType.Dirt;\r\n            case 'O': return CellType.Boulder;\r\n            case '*': return CellType.Diamond;\r\n            case '-':\r\n            case '/':\r\n            case '|':\r\n            case '\\\\': return CellType.Butterfly;\r\n            case 'A': return CellType.Player;\r\n            default:\r\n                throw new Error('Unknown character: ' + c);\r\n        }\r\n    }\r\n\r\n    private renderCell(cell: Cell): string {\r\n        const cellType = cell & Mask.type;\r\n        switch (cellType) {\r\n            case CellType.Nothing: return ' ';\r\n            case CellType.Steel: return '#';;\r\n            case CellType.Brick: return '+';\r\n            case CellType.Dirt: return ':';\r\n            case CellType.Boulder: return 'O';\r\n            case CellType.Diamond: return '*';\r\n            case CellType.Explosion: return '$';\r\n            case CellType.Butterfly: return '%';\r\n            case CellType.Player: return 'A';\r\n            default:\r\n                throw new Error('Unknown cell type: ' + cellType);\r\n        }\r\n    }\r\n\r\n    renderScreen(): string[] {\r\n        let screen: string[] = new Array<string>(Settings.height);\r\n        let row: string = '';\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        for (let cell of this.cells) {\r\n            row += this.renderCell(cell);\r\n            x++;\r\n            if (x >= Settings.width) {\r\n                screen[y] = row;\r\n                row = '';\r\n                x = 0;\r\n                y++;\r\n            }\r\n        }\r\n        return screen;\r\n    }\r\n\r\n    compare(): void {\r\n        let diamonds = 0;\r\n        let butterflies = 0;\r\n        for (let y = 0; y < Settings.height; y++) {\r\n            for (let x = 0; x < Settings.width; x++) {\r\n                const point = y * Settings.width + x;\r\n                const currentCellType = this.cells[point] & Mask.type;\r\n                const renderedCellType = currentCellType === CellType.Explosion ? CellType.Diamond : currentCellType;\r\n                const expectedCellType = this.createCell(this.screen[y][x]);\r\n                if (renderedCellType !== expectedCellType) {\r\n                    throw new Error(`Difference! cell(${x}, ${y}): current=${currentCellType}, expected=${expectedCellType}`);\r\n                }\r\n                switch (expectedCellType) {\r\n                    case CellType.Diamond:\r\n                        diamonds++;\r\n                        break;\r\n                    case CellType.Butterfly:\r\n                        butterflies++;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const score = parseInt(this.screen[this.screen.length - 1].substr(8, 6));\r\n        if (score !== this.score) {\r\n            throw new Error(`Difference! score=${this.score}, expected=${score}`);\r\n        }\r\n        if (diamonds !== this.diamonds) {\r\n            throw new Error(`Divergence! diamonds=${this.diamonds}, expected=${diamonds}`);\r\n        }\r\n        if (butterflies !== this.butterflies) {\r\n            throw new Error(`Difference! butterflies=${this.butterflies}, expected=${butterflies}`);\r\n        }\r\n    }\r\n    //fucking magic!!!\r\n    warmUp(): void {\r\n        let diamonds = 0;\r\n        let butterflies = 0;\r\n        for (let y = 0; y < Settings.height; y++) {\r\n            for (let x = 0; x < Settings.width; x++) {\r\n                const point = y * Settings.width + x;\r\n                const currentCellType = this.cells[point] & Mask.type;\r\n                const renderedCellType = currentCellType === CellType.Explosion ? CellType.Diamond : currentCellType;\r\n                switch (renderedCellType) {\r\n                    case CellType.Diamond:\r\n                        diamonds++;\r\n                        break;\r\n                    case CellType.Butterfly:\r\n                        butterflies++;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { Direction, IWorld, debug } from \"./common\";\r\nimport { World } from \"./world\";\r\nimport { AI } from \"./ai\";\r\n\r\n\r\nconst possibleMaxDepth = 5;\r\n\r\nexport class Bot {\r\n    private screen: string[];\r\n    private world: IWorld;\r\n    private ai: AI;\r\n    private maxDepth: number = possibleMaxDepth;\r\n    private maxElapsed: number = 0;\r\n\r\n    constructor(screen: string[]) {\r\n        this.screen = screen;\r\n        this.world = new World(this.screen);\r\n        this.ai = new AI(this.world, this.maxDepth);\r\n    }\r\n\r\n    play(): string {\r\n        if (debug) {\r\n            this.world.compare();\r\n            console.log(`frame: ${this.world.frame}`);\r\n        } else {\r\n            if (this.world.frame < 2) {\r\n                this.world.warmUp();\r\n            }\r\n        }\r\n\r\n        if (this.world.butterflies === 0 && this.world.diamonds === 0) {\r\n            return 'q';\r\n        }\r\n\r\n        const startTime = (new Date()).getTime();\r\n        let direction = this.ai.process();\r\n        const elapsed = (new Date()).getTime() - startTime;\r\n        if (debug) {\r\n            if (elapsed > this.maxElapsed) {\r\n                this.maxElapsed = elapsed;\r\n            }\r\n            console.log(`maxTime: ${this.maxElapsed}`);\r\n        }\r\n\r\n        if (!debug) {\r\n            if (elapsed >= 96) {\r\n                this.maxDepth = possibleMaxDepth - 1;\r\n                direction = Direction.Stay;\r\n            } else if (elapsed < 50) {\r\n                this.maxDepth = possibleMaxDepth;\r\n            }\r\n        }\r\n\r\n        this.world.control(direction);\r\n        this.world.update();\r\n\r\n        switch (direction) {\r\n            case Direction.Up:\r\n                return 'u';\r\n            case Direction.Right:\r\n                return 'r';\r\n            case Direction.Down:\r\n                return 'd';\r\n            case Direction.Left:\r\n                return 'l';\r\n            case Direction.Stay:\r\n                return '';\r\n        }\r\n    }\r\n}","import { Bot } from \"./bot\";\r\n\r\nconst play = function* (screen: string[]): IterableIterator<string> {\r\n  const bot = new Bot(screen);\r\n  while (true) {\r\n    yield bot.play();\r\n  }\r\n}\r\n\r\nmodule.exports.play = play;"],"sourceRoot":"."}